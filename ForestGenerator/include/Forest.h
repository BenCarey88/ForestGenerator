//----------------------------------------------------------------------------------------------------------------------
/// @file Forest.h
/// @author Ben Carey
/// @version 1.0
/// @date 06/07/19
//----------------------------------------------------------------------------------------------------------------------

#ifndef FOREST_H_
#define FOREST_H_

#include <iostream>
#include <vector>
#include <ngl/Vec3.h>
#include <ngl/Mat4.h>
#include "LSystem.h"

//----------------------------------------------------------------------------------------------------------------------
/// @class Forest
/// @brief this class stores details of the L-system
//----------------------------------------------------------------------------------------------------------------------


class Forest
{
public:

  //CONSTRUCTOR
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief default ctor for Forest class
  //--------------------------------------------------------------------------------------------------------------------
  Forest() = default;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief user ctor for Forest class
  //--------------------------------------------------------------------------------------------------------------------
  Forest(std::vector<LSystem> _treeTypes, float _width, float _length, size_t _numTrees);

  //TREE STRUCT
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief simple struct for grouping together an LSystem type, position and rotation
  //--------------------------------------------------------------------------------------------------------------------
  struct Tree
  {
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief ctor Tree struct
    //--------------------------------------------------------------------------------------------------------------------
    Tree(size_t _type, ngl::Mat4 _transform);
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief tree type (ie. index of LSystem it's based on)
    //--------------------------------------------------------------------------------------------------------------------
    size_t m_type;
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief transform matrix for tree, representing position and orientation
    //--------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_transform;
  };

  //PUBLIC MEMBER VARIABLES
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief base tree types for the forest
  //--------------------------------------------------------------------------------------------------------------------
  std::vector<LSystem> m_treeTypes;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief width and length of forest
  //--------------------------------------------------------------------------------------------------------------------
  float m_width;
  float m_length;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief number of trees in forest
  //--------------------------------------------------------------------------------------------------------------------
  size_t m_numTrees;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief stores positions and types of all trees in the forest
  //--------------------------------------------------------------------------------------------------------------------
  std::vector<Tree> m_treeData;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief seed for random scattering
  //--------------------------------------------------------------------------------------------------------------------
  size_t m_seed = 0;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief toggle to determine if we should use a seed - if not, we seed by time
  //--------------------------------------------------------------------------------------------------------------------
  bool m_useSeed = false;



  //PUBLIC METHODS
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief fill m_treePositions
  //--------------------------------------------------------------------------------------------------------------------
  void scatterForest();
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief create geometry of tree by taking instances from the instance cache
  //--------------------------------------------------------------------------------------------------------------------
  void createTree(ngl::Mat4 _transform, );

};

#endif //FOREST_H_
