//----------------------------------------------------------------------------------------------------------------------
/// @file Forest.h
/// @author Ben Carey
/// @version 1.0
/// @date 06/07/19
//----------------------------------------------------------------------------------------------------------------------

#ifndef FOREST_H_
#define FOREST_H_

#include <iostream>
#include <vector>
#include <ngl/Vec3.h>
#include <ngl/Mat4.h>
#include "LSystem.h"

//----------------------------------------------------------------------------------------------------------------------
/// @class Forest
/// @brief this class stores details of the L-system
//----------------------------------------------------------------------------------------------------------------------


class Forest
{
public:

  //CONSTRUCTOR
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief default ctor for Forest class
  //--------------------------------------------------------------------------------------------------------------------
  Forest() = default;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief user ctor for Forest class
  //--------------------------------------------------------------------------------------------------------------------
  Forest(std::vector<LSystem> _treeTypes, float _width, float _length, size_t _numTrees);

  //TREE STRUCT
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief simple struct for grouping together an LSystem type, position and rotation
  //--------------------------------------------------------------------------------------------------------------------
  struct Tree
  {
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for Tree struct
    //--------------------------------------------------------------------------------------------------------------------
    Tree(size_t _type, ngl::Mat4 _transform);
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief tree type (ie. index of LSystem it's based on)
    //--------------------------------------------------------------------------------------------------------------------
    size_t m_type;
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief transform matrix for tree, representing position and orientation
    //--------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_transform;
  };

  //INSTANCE STRUCT
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief struct detailing the data of an instance
  //--------------------------------------------------------------------------------------------------------------------
  struct Instance
  {
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief default ctor for Instance struct
    //--------------------------------------------------------------------------------------------------------------------
    Instance() = default;

    size_t m_id;
    size_t m_age;
    ngl::Mat4 m_transform;

    struct ExitPoint
    {
      ExitPoint(size_t _exitId, size_t _exitAge, ngl::Mat4 _exitTransform);
      size_t m_exitId;
      size_t m_exitAge;
      ngl::Mat4 m_exitTransform;
    };
    std::vector<ExitPoint> m_exitPoints;

    std::vector<ngl::Vec3> m_vertexBuffer;
    std::vector<GLshort> m_indexBuffer;
  };

  //OUTPUT DATA STRUCT
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief
  //--------------------------------------------------------------------------------------------------------------------
  struct OutputData
  {
    //--------------------------------------------------------------------------------------------------------------------
    /// @brief
    //--------------------------------------------------------------------------------------------------------------------
    OutputData(std::vector<ngl::Vec3> _vertexBuffer, std::vector<GLshort> _indexBuffer, ngl::Mat4 _transform);

    //ngl::Mat4 m_transform;
  };

  //PUBLIC MEMBER VARIABLES
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief base tree types for the forest
  //--------------------------------------------------------------------------------------------------------------------
  std::vector<LSystem> m_treeTypes;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief width and length of forest
  //--------------------------------------------------------------------------------------------------------------------
  float m_width;
  float m_length;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief number of trees in forest
  //--------------------------------------------------------------------------------------------------------------------
  size_t m_numTrees;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief stores positions and types of all trees in the forest
  //--------------------------------------------------------------------------------------------------------------------
  std::vector<Tree> m_treeData;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief seed for random scattering
  //--------------------------------------------------------------------------------------------------------------------
  size_t m_seed = 0;
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief toggle to determine if we should use a seed - if not, we seed by time
  //--------------------------------------------------------------------------------------------------------------------
  bool m_useSeed = false;


  //instance cache is vectors of instances nested 3 deep
  //outer layer separates instances by id
  //middle layer separates instances of the same id by age
  //inner layer separates multiple possible instances of the same id and age
  //so accessing an istance is done by instanceCache[id][age][randomizer]
  std::vector<std::vector<std::vector<Instance>>> m_instanceCache;

  std::vector<OutputData> m_output;


  //PUBLIC METHODS
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief fill m_treePositions
  //--------------------------------------------------------------------------------------------------------------------
  void scatterForest();
  //--------------------------------------------------------------------------------------------------------------------
  /// @brief create geometry of tree by taking instances from the instance cache
  //--------------------------------------------------------------------------------------------------------------------
  void createTree(ngl::Mat4 _transform, size_t _id, size_t _age);

  Instance getInstance(size_t _id, size_t _age);

};

#endif //FOREST_H_
